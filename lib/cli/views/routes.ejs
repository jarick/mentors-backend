
import Router from 'koa-router'
import <%- entity %>Request from './../requests/<%- table %>'
import <%- entity %>Model from './../models/<%- table %>'
import {
  FilterAction,
  CreateAction,
  UpdateAction,
  RemoveAction,
  Compose,
  WrapMiddleware,
  EventsMiddleware,
  ClearCacheMiddleware,
  ListCacheMiddleware
} from './../../../konig.io-rest/lib'

export default () => {
  const router = new Router()

  router
    .get('/<%- table %>', async (ctx) => {
      const request = <%- entity %>Request.list(ctx)
      const model = <%- entity %>Model.list(ctx.db)
      const compose = Compose()
      compose.use(EventsMiddleware(ctx.emitter, '<%- table %>.list'))
      compose.use(ListCacheMiddleware(ctx.redis, '<%- table %>'))
      compose.use(WrapMiddleware(model))
      await FilterAction(request, compose)
    })
    .post('/<%- table %>', async (ctx) => {
      const request = <%- entity %>Request.create(ctx)
      const model = <%- entity %>Model.create(ctx.db)
      const compose = Compose()
      compose.use(EventsMiddleware(ctx.emitter, '<%- table %>.create'))
      compose.use(ClearCacheMiddleware(ctx.redis, '<%- table %>'))
      compose.use(WrapMiddleware(model))
      await CreateAction(request, compose)
    })
    .put('/<%- table %>/:id', async (ctx) => {
      const request = <%- entity %>Request.update(ctx)
      const model = <%- entity %>Model.update(ctx.db)
      const compose = Compose()
      compose.use(EventsMiddleware(ctx.emitter, '<%- table %>.update'))
      compose.use(ClearCacheMiddleware(ctx.redis, '<%- table %>'))
      compose.use(WrapMiddleware(model))
      await UpdateAction(request, compose)
    })
    .delete('/<%- table %>/:id', async (ctx) => {
      const request = <%- entity %>Request.remove(ctx)
      const model = <%- entity %>Model.remove(ctx.db)
      const compose = Compose()
      compose.use(EventsMiddleware(ctx.emitter, '<%- table %>.remove'))
      compose.use(ClearCacheMiddleware(ctx.redis, '<%- table %>'))
      compose.use(WrapMiddleware(model))
      await RemoveAction(request, compose)
    })

  return router;
}